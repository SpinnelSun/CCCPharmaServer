package br.edu.ufcg.cccpharma.soldProduct;

import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import br.edu.ufcg.cccpharma.product.Product;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * A SoldProduct object models the sale of a single sold product on the
 * CCCPharma system. A sold product is unique identified by an autogenerated ID
 * number and has the product and the sold quantity as its other attributes.
 * These objects are used to create a better control over the sales. The sold
 * products are described in one of our database tables.
 * 
 * @author Douglas Pereira de Lima
 * @author Fanny Batista Vieira
 * @author Mateus de Lima Oliveira
 * @author Matheus Alves dos Santos
 * 
 * @since 2018-11-12
 * @version 1.0
 * 
 */
@Entity
@Table(name = "tb_sold_product")
public class SoldProduct {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, optional = false)
	@JoinColumn(name = "product_code", nullable = false)
	private Product product;

	private int quantity;

	/**
	 * Creates a SoldProduct object with nulled attributes.
	 */
	public SoldProduct() {}

	/**
	 * Creates a SoldProduct object based on its ID number, the product that was
	 * sold and the quantity of this sale.
	 * 
	 * @param id       The unique identifier of the SoldProduct.
	 * @param product  The product that was sold.
	 * @param quantity The sold quantity of the product.
	 * 
	 */
	public SoldProduct(long id, Product product, int quantity) {
		this.id = id;
		this.product = product;
		this.quantity = quantity;
	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Product getProduct() {
		return this.product;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	public int getQuantity() {
		return this.quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	/**
	 * Generates a hash code for the SoldProduct object based on its ID number.
	 * 
	 * @return The generated hash code for the SoldProduct object.
	 * 
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * Verifies equality between the SoldProduct object and the Object given as
	 * parameter. This equality will only exists if the given Object is also an
	 * SoldProduct object and possesses the same ID number.
	 * 
	 * @param obj An object to be compared to the SoldProduct.
	 * 
	 * @return A boolean that represents the comparison result.
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SoldProduct other = (SoldProduct) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	/**
	 * Generates a textual representation of the SoldProduct object based on its ID
	 * number, the code of its product and the sold quantity.
	 * 
	 * @return The textual representation of the SoldProduct.
	 * 
	 */
	@Override
	public String toString() {
		return this.getId() + " - Product Code: " + this.getCode() + " - Quantity: " + this.getQuantity();
	}

	/**
	 * Returns the code of the product whose sale is represented by the SoldProduct
	 * object.
	 * 
	 * @return The code of the sold product.
	 * 
	 */
	@JsonIgnore
	public String getCode() {
		return product.getCode();
	}

}
